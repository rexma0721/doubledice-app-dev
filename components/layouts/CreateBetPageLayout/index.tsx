import { ReactChild, ReactChildren, useEffect, useLayoutEffect, useState } from "react"

// Next
import Head from "next/head"
import Link from 'next/link'
import Image from "next/image"

// Utils
// import { IoMdClose } from "react-icons/io"
import getImageUrl from 'utils/getImageUrl'
import { boulder } from "styles/colors"
import { AiOutlineArrowLeft } from "react-icons/ai"
import { ToastContainer } from "react-toastify";

// Components
import * as S from './StyledComponents'
import Navbar from '../shared/Navbar'

// Redux
import { useAppSelector } from "hooks/reduxHooks"
import UseNetwork from "components/shared/UseNetwork"
import { previousStep } from "components/createBetPage/ducks"
import { useDispatch } from "react-redux"
import { CATEGORIES, CategoryId } from "utils/categories"

interface PropsI {
  children: ReactChild | ReactChildren;
}

const CreateBetPageLayout = ({ children }: PropsI) => {
  const { categoryId, step } = useAppSelector((state) => state.createBetReducer)
  const [imageBackground, setImageBackground] = useState<string>('')
  const [screenWidth, setScreenWidth] = useState<number | null>(null)
  const dispatch = useDispatch()

  const backgroundImageSrc = categoryId in CATEGORIES
    ? CATEGORIES[categoryId as CategoryId].backgroundImageSrc
    : '';

  useEffect(() => {
    if (categoryId) setImageBackground(backgroundImageSrc)
  }, [categoryId])

  useLayoutEffect(() => {
    function updateSize() {
      setScreenWidth(window.innerWidth);
    }
    window.addEventListener('resize', updateSize);
    updateSize();
    return () => window.removeEventListener('resize', updateSize);
  }, [])

  return (
    <S.Layout>
      <Head>
        <title>Create Bet</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Navbar />
      <S.Main data-name="create-bet-page" screenWidth={screenWidth}>
        {/* <S.Button>
          <Link href="/">
            <S.IconLink>
              <IoMdClose size={30} color={boulder} />
            </S.IconLink>
          </Link>
        </S.Button> */}
        {step && step > 1 && (backgroundImageSrc || imageBackground) ?
          <S.BackgroundImage>
            <S.ImageContainer>
              <Image
                src={getImageUrl((backgroundImageSrc || imageBackground), true)}
                alt='background-image'
                layout="fill"
                objectFit="cover"
                loading='lazy'
              />
            </S.ImageContainer>
          </S.BackgroundImage>
          : ''
        }
        <S.Content>
          {(step && step > 1) ?
            <S.LeftButton onClick={() => dispatch(previousStep())}>
              <AiOutlineArrowLeft size={35} color={boulder} />
            </S.LeftButton>
            : ''
          }
          {children}
        </S.Content>
      </S.Main>
      <UseNetwork />
      <ToastContainer
        autoClose={10000}
      />
    </S.Layout>
  );
};

export default CreateBetPageLayout;
