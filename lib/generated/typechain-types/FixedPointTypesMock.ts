/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FixedPointTypesMockInterface extends utils.Interface {
  contractName: "FixedPointTypesMock";
  functions: {
    "add(uint256,uint256)": FunctionFragment;
    "div0(uint256,uint256)": FunctionFragment;
    "divToUint256(uint256,uint256)": FunctionFragment;
    "eq(uint256,uint256)": FunctionFragment;
    "floorToUint256(uint256)": FunctionFragment;
    "gte(uint256,uint256)": FunctionFragment;
    "lte(uint256,uint256)": FunctionFragment;
    "mul0(uint256,uint256)": FunctionFragment;
    "sub(uint256,uint256)": FunctionFragment;
    "toUFixed16x4(uint256)": FunctionFragment;
    "toUFixed256x18__fromUFixed16x4(uint16)": FunctionFragment;
    "toUFixed256x18__fromUFixed32x6(uint32)": FunctionFragment;
    "toUFixed256x18__fromUint256(uint256)": FunctionFragment;
    "toUFixed32x6(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "div0",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "divToUint256",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eq",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "floorToUint256",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gte",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lte",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mul0",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUFixed16x4",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUFixed256x18__fromUFixed16x4",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUFixed256x18__fromUFixed32x6",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUFixed256x18__fromUint256",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUFixed32x6",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "div0", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "divToUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eq", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "floorToUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gte", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lte", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mul0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toUFixed16x4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toUFixed256x18__fromUFixed16x4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toUFixed256x18__fromUFixed32x6",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toUFixed256x18__fromUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toUFixed32x6",
    data: BytesLike
  ): Result;

  events: {};
}

export interface FixedPointTypesMock extends BaseContract {
  contractName: "FixedPointTypesMock";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FixedPointTypesMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    div0(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    divToUint256(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    eq(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    floorToUint256(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mul0(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toUFixed16x4(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { converted: number }>;

    toUFixed256x18__fromUFixed16x4(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { converted: BigNumber }>;

    toUFixed256x18__fromUFixed32x6(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { converted: BigNumber }>;

    toUFixed256x18__fromUint256(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toUFixed32x6(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { converted: number }>;
  };

  add(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  div0(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  divToUint256(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  eq(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  floorToUint256(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gte(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lte(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mul0(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sub(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toUFixed16x4(value: BigNumberish, overrides?: CallOverrides): Promise<number>;

  toUFixed256x18__fromUFixed16x4(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toUFixed256x18__fromUFixed32x6(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toUFixed256x18__fromUint256(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toUFixed32x6(value: BigNumberish, overrides?: CallOverrides): Promise<number>;

  callStatic: {
    add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    div0(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divToUint256(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eq(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    floorToUint256(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mul0(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUFixed16x4(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    toUFixed256x18__fromUFixed16x4(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUFixed256x18__fromUFixed32x6(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUFixed256x18__fromUint256(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUFixed32x6(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    div0(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divToUint256(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eq(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    floorToUint256(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mul0(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUFixed16x4(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUFixed256x18__fromUFixed16x4(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUFixed256x18__fromUFixed32x6(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUFixed256x18__fromUint256(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUFixed32x6(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    div0(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divToUint256(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eq(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    floorToUint256(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mul0(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUFixed16x4(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUFixed256x18__fromUFixed16x4(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUFixed256x18__fromUFixed32x6(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUFixed256x18__fromUint256(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUFixed32x6(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
