/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FixedPointTypesMock,
  FixedPointTypesMockInterface,
} from "../FixedPointTypesMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "UFixed256x18",
        name: "value",
        type: "uint256",
      },
    ],
    name: "UFixed16x4LossOfPrecision",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "UFixed256x18",
        name: "value",
        type: "uint256",
      },
    ],
    name: "UFixed32x6LossOfPrecision",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "UFixed256x18",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "UFixed256x18",
        name: "b",
        type: "uint256",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "UFixed256x18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "UFixed256x18",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "div0",
    outputs: [
      {
        internalType: "UFixed256x18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "UFixed256x18",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "UFixed256x18",
        name: "b",
        type: "uint256",
      },
    ],
    name: "divToUint256",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "UFixed256x18",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "UFixed256x18",
        name: "b",
        type: "uint256",
      },
    ],
    name: "eq",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "UFixed256x18",
        name: "value",
        type: "uint256",
      },
    ],
    name: "floorToUint256",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "UFixed256x18",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "UFixed256x18",
        name: "b",
        type: "uint256",
      },
    ],
    name: "gte",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "UFixed256x18",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "UFixed256x18",
        name: "b",
        type: "uint256",
      },
    ],
    name: "lte",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "UFixed256x18",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "mul0",
    outputs: [
      {
        internalType: "UFixed256x18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "UFixed256x18",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "UFixed256x18",
        name: "b",
        type: "uint256",
      },
    ],
    name: "sub",
    outputs: [
      {
        internalType: "UFixed256x18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "UFixed256x18",
        name: "value",
        type: "uint256",
      },
    ],
    name: "toUFixed16x4",
    outputs: [
      {
        internalType: "UFixed16x4",
        name: "converted",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "UFixed16x4",
        name: "value",
        type: "uint16",
      },
    ],
    name: "toUFixed256x18__fromUFixed16x4",
    outputs: [
      {
        internalType: "UFixed256x18",
        name: "converted",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "UFixed32x6",
        name: "value",
        type: "uint32",
      },
    ],
    name: "toUFixed256x18__fromUFixed32x6",
    outputs: [
      {
        internalType: "UFixed256x18",
        name: "converted",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "toUFixed256x18__fromUint256",
    outputs: [
      {
        internalType: "UFixed256x18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "UFixed256x18",
        name: "value",
        type: "uint256",
      },
    ],
    name: "toUFixed32x6",
    outputs: [
      {
        internalType: "UFixed32x6",
        name: "converted",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105c7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ca5760003560e01c8063ae38ebb81161007c578063ae38ebb8146100f5578063b42b037d1461018c578063b4773329146101b2578063b67d77c5146101c5578063bbaaee20146101d8578063ea6515c4146101eb578063ff4b83cf146101fe57600080fd5b80630a0cfc2a146100cf578063223bda65146100f55780632cf855331461010857806332148d731461011b5780633b40436b1461013e578063771602f714610166578063a53e4dbd14610179575b600080fd5b6100e26100dd366004610486565b610211565b6040519081526020015b60405180910390f35b6100e261010336600461049f565b610222565b6100e2610116366004610486565b610235565b61012e61012936600461049f565b610240565b60405190151581526020016100ec565b61015161014c366004610486565b61024a565b60405163ffffffff90911681526020016100ec565b6100e261017436600461049f565b610255565b6100e261018736600461049f565b610261565b61019f61019a366004610486565b61026d565b60405161ffff90911681526020016100ec565b61012e6101c036600461049f565b610278565b6100e26101d336600461049f565b610283565b6100e26101e63660046104c1565b61028f565b61012e6101f936600461049f565b6102a4565b6100e261020c3660046104e7565b6102af565b600061021c826102c3565b92915050565b600061022e83836102d7565b9392505050565b600061021c826102e3565b600081831461022e565b600061021c826102f7565b600061022e838361034b565b600061022e8383610357565b600061021c82610363565b60008282111561022e565b600061022e83836103ae565b600064e8d4a5100063ffffffff83160261021c565b60008282101561022e565b6000655af3107a400061ffff83160261021c565b600061021c82670de0b6b3a7640000610521565b600061022e8284610540565b600061021c670de0b6b3a764000083610540565b600061031061030b64e8d4a5100084610540565b6103ba565b905063ffffffff811664e8d4a510000282146103465760405162ecc92960e81b8152600481018390526024015b60405180910390fd5b919050565b600061022e8284610562565b600061022e8284610521565b600061037d610378655af3107a400084610540565b610423565b905061ffff8116655af3107a4000028214610346576040516318c63b4560e31b81526004810183905260240161033d565b600061022e828461057a565b600063ffffffff82111561041f5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161033d565b5090565b600061ffff82111561041f5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201526536206269747360d01b606482015260840161033d565b60006020828403121561049857600080fd5b5035919050565b600080604083850312156104b257600080fd5b50508035926020909101359150565b6000602082840312156104d357600080fd5b813563ffffffff8116811461022e57600080fd5b6000602082840312156104f957600080fd5b813561ffff8116811461022e57600080fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561053b5761053b61050b565b500290565b60008261055d57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156105755761057561050b565b500190565b60008282101561058c5761058c61050b565b50039056fea2646970667358221220f358ca1611906c802d5b3fe610d6acbdd6e5f27d17ef10f150030b8cada5fb0864736f6c634300080c0033";

type FixedPointTypesMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FixedPointTypesMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FixedPointTypesMock__factory extends ContractFactory {
  constructor(...args: FixedPointTypesMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "FixedPointTypesMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FixedPointTypesMock> {
    return super.deploy(overrides || {}) as Promise<FixedPointTypesMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FixedPointTypesMock {
    return super.attach(address) as FixedPointTypesMock;
  }
  connect(signer: Signer): FixedPointTypesMock__factory {
    return super.connect(signer) as FixedPointTypesMock__factory;
  }
  static readonly contractName: "FixedPointTypesMock";
  public readonly contractName: "FixedPointTypesMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FixedPointTypesMockInterface {
    return new utils.Interface(_abi) as FixedPointTypesMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FixedPointTypesMock {
    return new Contract(address, _abi, signerOrProvider) as FixedPointTypesMock;
  }
}
