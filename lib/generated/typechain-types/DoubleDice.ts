/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type EncodedVirtualFloorMetadataStruct = {
  version: BytesLike;
  data: BytesLike;
};

export type EncodedVirtualFloorMetadataStructOutput = [string, string] & {
  version: string;
  data: string;
};

export type VirtualFloorCreationParamsStruct = {
  virtualFloorId: BigNumberish;
  betaOpen_e18: BigNumberish;
  creationFeeRate_e18: BigNumberish;
  tOpen: BigNumberish;
  tClose: BigNumberish;
  tResolve: BigNumberish;
  nOutcomes: BigNumberish;
  paymentToken: string;
  bonusAmount: BigNumberish;
  optionalMinCommitmentAmount: BigNumberish;
  optionalMaxCommitmentAmount: BigNumberish;
  metadata: EncodedVirtualFloorMetadataStruct;
};

export type VirtualFloorCreationParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  number,
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  EncodedVirtualFloorMetadataStructOutput
] & {
  virtualFloorId: BigNumber;
  betaOpen_e18: BigNumber;
  creationFeeRate_e18: BigNumber;
  tOpen: number;
  tClose: number;
  tResolve: number;
  nOutcomes: number;
  paymentToken: string;
  bonusAmount: BigNumber;
  optionalMinCommitmentAmount: BigNumber;
  optionalMaxCommitmentAmount: BigNumber;
  metadata: EncodedVirtualFloorMetadataStructOutput;
};

export type OutcomeTotalsStruct = {
  amount: BigNumberish;
  amountTimesBeta_e18: BigNumberish;
};

export type OutcomeTotalsStructOutput = [BigNumber, BigNumber] & {
  amount: BigNumber;
  amountTimesBeta_e18: BigNumber;
};

export type CreatedVirtualFloorParamsStruct = {
  betaOpen_e18: BigNumberish;
  creationFeeRate_e18: BigNumberish;
  platformFeeRate_e18: BigNumberish;
  tOpen: BigNumberish;
  tClose: BigNumberish;
  tResolve: BigNumberish;
  nOutcomes: BigNumberish;
  paymentToken: string;
  bonusAmount: BigNumberish;
  minCommitmentAmount: BigNumberish;
  maxCommitmentAmount: BigNumberish;
  creator: string;
};

export type CreatedVirtualFloorParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  number,
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  betaOpen_e18: BigNumber;
  creationFeeRate_e18: BigNumber;
  platformFeeRate_e18: BigNumber;
  tOpen: number;
  tClose: number;
  tResolve: number;
  nOutcomes: number;
  paymentToken: string;
  bonusAmount: BigNumber;
  minCommitmentAmount: BigNumber;
  maxCommitmentAmount: BigNumber;
  creator: string;
};

export declare namespace CreationQuotas {
  export type QuotaAdjustmentStruct = {
    creator: string;
    relativeAmount: BigNumberish;
  };

  export type QuotaAdjustmentStructOutput = [string, BigNumber] & {
    creator: string;
    relativeAmount: BigNumber;
  };
}

export declare namespace BaseDoubleDice {
  export type BaseDoubleDiceInitParamsStruct = {
    tokenMetadataUriTemplate: string;
    platformFeeBeneficiary: string;
    platformFeeRate_e18: BigNumberish;
    contractURI: string;
  };

  export type BaseDoubleDiceInitParamsStructOutput = [
    string,
    string,
    BigNumber,
    string
  ] & {
    tokenMetadataUriTemplate: string;
    platformFeeBeneficiary: string;
    platformFeeRate_e18: BigNumber;
    contractURI: string;
  };
}

export interface DoubleDiceInterface extends utils.Interface {
  contractName: "DoubleDice";
  functions: {
    "CHALLENGE_BOND_USD_AMOUNT()": FunctionFragment;
    "CHALLENGE_WINDOW_DURATION()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "SET_WINDOW_DURATION()": FunctionFragment;
    "adjustCreationQuotas((address,int256)[])": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "bondUsdErc20Token()": FunctionFragment;
    "cancelVirtualFloorFlagged(uint256,string)": FunctionFragment;
    "cancelVirtualFloorUnresolvable(uint256)": FunctionFragment;
    "challengeSetResult(uint256,uint8)": FunctionFragment;
    "claimPayouts(uint256,uint256[])": FunctionFragment;
    "claimRefunds(uint256,uint256[])": FunctionFragment;
    "commitToVirtualFloor(uint256,uint8,uint256,uint256)": FunctionFragment;
    "confirmUnchallengedResult(uint256)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "createVirtualFloor((uint256,uint256,uint256,uint32,uint32,uint32,uint8,address,uint256,uint256,uint256,(bytes32,bytes)))": FunctionFragment;
    "creationQuotas(address)": FunctionFragment;
    "finalizeChallenge(uint256,uint8)": FunctionFragment;
    "finalizeUnsetResult(uint256,uint8)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getVirtualFloorCreator(uint256)": FunctionFragment;
    "getVirtualFloorOutcomeTotals(uint256,uint8)": FunctionFragment;
    "getVirtualFloorParams(uint256)": FunctionFragment;
    "getVirtualFloorState(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize((string,address,uint256,string),address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isPaymentTokenWhitelisted(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "platformFeeBeneficiary()": FunctionFragment;
    "platformFeeRate_e18()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "resolutions(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setPlatformFeeBeneficiary(address)": FunctionFragment;
    "setPlatformFeeRate_e18(uint256)": FunctionFragment;
    "setResult(uint256,uint8)": FunctionFragment;
    "setTokenMetadataUriTemplate(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updatePaymentTokenWhitelist(address,bool)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CHALLENGE_BOND_USD_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHALLENGE_WINDOW_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_WINDOW_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adjustCreationQuotas",
    values: [CreationQuotas.QuotaAdjustmentStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bondUsdErc20Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelVirtualFloorFlagged",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelVirtualFloorUnresolvable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeSetResult",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPayouts",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRefunds",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "commitToVirtualFloor",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmUnchallengedResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createVirtualFloor",
    values: [VirtualFloorCreationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "creationQuotas",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeChallenge",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeUnsetResult",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVirtualFloorCreator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVirtualFloorOutcomeTotals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVirtualFloorParams",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVirtualFloorState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BaseDoubleDice.BaseDoubleDiceInitParamsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPaymentTokenWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeeBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeRate_e18",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolutions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeeBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeeRate_e18",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setResult",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenMetadataUriTemplate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePaymentTokenWhitelist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "CHALLENGE_BOND_USD_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHALLENGE_WINDOW_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_WINDOW_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustCreationQuotas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondUsdErc20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelVirtualFloorFlagged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelVirtualFloorUnresolvable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeSetResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRefunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitToVirtualFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmUnchallengedResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVirtualFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationQuotas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeUnsetResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVirtualFloorCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVirtualFloorOutcomeTotals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVirtualFloorParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVirtualFloorState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPaymentTokenWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeRate_e18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeeRate_e18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenMetadataUriTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePaymentTokenWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ContractURIUpdate(string)": EventFragment;
    "CreationQuotaAdjustments(tuple[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PaymentTokenWhitelistUpdate(address,bool)": EventFragment;
    "PlatformFeeBeneficiaryUpdate(address)": EventFragment;
    "PlatformFeeRateUpdate(uint256)": EventFragment;
    "ResultUpdate(uint256,address,uint8,uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UserCommitment(uint256,address,uint8,uint256,uint256,uint256,uint256)": EventFragment;
    "VirtualFloorCancellationFlagged(uint256,string)": EventFragment;
    "VirtualFloorCancellationUnresolvable(uint256)": EventFragment;
    "VirtualFloorCreation(uint256,address,uint256,uint256,uint256,uint32,uint32,uint32,uint8,address,uint256,uint256,uint256,tuple)": EventFragment;
    "VirtualFloorResolution(uint256,uint8,uint8,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURIUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreationQuotaAdjustments"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PaymentTokenWhitelistUpdate"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PlatformFeeBeneficiaryUpdate"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformFeeRateUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResultUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserCommitment"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VirtualFloorCancellationFlagged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VirtualFloorCancellationUnresolvable"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VirtualFloorCreation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VirtualFloorResolution"): EventFragment;
}

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { account: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type ContractURIUpdateEvent = TypedEvent<
  [string],
  { contractURI: string }
>;

export type ContractURIUpdateEventFilter =
  TypedEventFilter<ContractURIUpdateEvent>;

export type CreationQuotaAdjustmentsEvent = TypedEvent<
  [CreationQuotas.QuotaAdjustmentStructOutput[]],
  { adjustments: CreationQuotas.QuotaAdjustmentStructOutput[] }
>;

export type CreationQuotaAdjustmentsEventFilter =
  TypedEventFilter<CreationQuotaAdjustmentsEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PaymentTokenWhitelistUpdateEvent = TypedEvent<
  [string, boolean],
  { token: string; whitelisted: boolean }
>;

export type PaymentTokenWhitelistUpdateEventFilter =
  TypedEventFilter<PaymentTokenWhitelistUpdateEvent>;

export type PlatformFeeBeneficiaryUpdateEvent = TypedEvent<
  [string],
  { platformFeeBeneficiary: string }
>;

export type PlatformFeeBeneficiaryUpdateEventFilter =
  TypedEventFilter<PlatformFeeBeneficiaryUpdateEvent>;

export type PlatformFeeRateUpdateEvent = TypedEvent<
  [BigNumber],
  { platformFeeRate_e18: BigNumber }
>;

export type PlatformFeeRateUpdateEventFilter =
  TypedEventFilter<PlatformFeeRateUpdateEvent>;

export type ResultUpdateEvent = TypedEvent<
  [BigNumber, string, number, number],
  { vfId: BigNumber; operator: string; action: number; outcomeIndex: number }
>;

export type ResultUpdateEventFilter = TypedEventFilter<ResultUpdateEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export type URIEvent = TypedEvent<
  [string, BigNumber],
  { value: string; id: BigNumber }
>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type UserCommitmentEvent = TypedEvent<
  [BigNumber, string, number, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    virtualFloorId: BigNumber;
    committer: string;
    outcomeIndex: number;
    timeslot: BigNumber;
    amount: BigNumber;
    beta_e18: BigNumber;
    tokenId: BigNumber;
  }
>;

export type UserCommitmentEventFilter = TypedEventFilter<UserCommitmentEvent>;

export type VirtualFloorCancellationFlaggedEvent = TypedEvent<
  [BigNumber, string],
  { virtualFloorId: BigNumber; reason: string }
>;

export type VirtualFloorCancellationFlaggedEventFilter =
  TypedEventFilter<VirtualFloorCancellationFlaggedEvent>;

export type VirtualFloorCancellationUnresolvableEvent = TypedEvent<
  [BigNumber],
  { virtualFloorId: BigNumber }
>;

export type VirtualFloorCancellationUnresolvableEventFilter =
  TypedEventFilter<VirtualFloorCancellationUnresolvableEvent>;

export type VirtualFloorCreationEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    EncodedVirtualFloorMetadataStructOutput
  ],
  {
    virtualFloorId: BigNumber;
    creator: string;
    betaOpen_e18: BigNumber;
    creationFeeRate_e18: BigNumber;
    platformFeeRate_e18: BigNumber;
    tOpen: number;
    tClose: number;
    tResolve: number;
    nOutcomes: number;
    paymentToken: string;
    bonusAmount: BigNumber;
    minCommitmentAmount: BigNumber;
    maxCommitmentAmount: BigNumber;
    metadata: EncodedVirtualFloorMetadataStructOutput;
  }
>;

export type VirtualFloorCreationEventFilter =
  TypedEventFilter<VirtualFloorCreationEvent>;

export type VirtualFloorResolutionEvent = TypedEvent<
  [BigNumber, number, number, BigNumber, BigNumber, BigNumber],
  {
    virtualFloorId: BigNumber;
    winningOutcomeIndex: number;
    resolutionType: number;
    winnerProfits: BigNumber;
    platformFeeAmount: BigNumber;
    creatorFeeAmount: BigNumber;
  }
>;

export type VirtualFloorResolutionEventFilter =
  TypedEventFilter<VirtualFloorResolutionEvent>;

export interface DoubleDice extends BaseContract {
  contractName: "DoubleDice";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DoubleDiceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CHALLENGE_BOND_USD_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHALLENGE_WINDOW_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SET_WINDOW_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    adjustCreationQuotas(
      adjustments: CreationQuotas.QuotaAdjustmentStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    bondUsdErc20Token(overrides?: CallOverrides): Promise<[string]>;

    cancelVirtualFloorFlagged(
      vfId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelVirtualFloorUnresolvable(
      vfId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    challengeSetResult(
      vfId: BigNumberish,
      challengeOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPayouts(
      vfId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRefunds(
      vfId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitToVirtualFloor(
      vfId: BigNumberish,
      outcomeIndex: BigNumberish,
      amount: BigNumberish,
      optionalDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmUnchallengedResult(
      vfId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    createVirtualFloor(
      params: VirtualFloorCreationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creationQuotas(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    finalizeChallenge(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeUnsetResult(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getVirtualFloorCreator(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVirtualFloorOutcomeTotals(
      vfId: BigNumberish,
      outcomeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OutcomeTotalsStructOutput]>;

    getVirtualFloorParams(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[CreatedVirtualFloorParamsStructOutput]>;

    getVirtualFloorState(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      params: BaseDoubleDice.BaseDoubleDiceInitParamsStruct,
      bondUsdErc20Token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPaymentTokenWhitelisted(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    platformFeeBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    platformFeeRate_e18(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolutions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        state: number;
        setOutcomeIndex: number;
        tResultChallengeMax: number;
        challengeOutcomeIndex: number;
        challenger: string;
      }
    >;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      contractURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformFeeBeneficiary(
      platformFeeBeneficiary_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformFeeRate_e18(
      platformFeeRate_e18_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setResult(
      vfId: BigNumberish,
      setOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenMetadataUriTemplate(
      template: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePaymentTokenWhitelist(
      token: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  CHALLENGE_BOND_USD_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  CHALLENGE_WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  SET_WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  adjustCreationQuotas(
    adjustments: CreationQuotas.QuotaAdjustmentStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  bondUsdErc20Token(overrides?: CallOverrides): Promise<string>;

  cancelVirtualFloorFlagged(
    vfId: BigNumberish,
    reason: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelVirtualFloorUnresolvable(
    vfId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  challengeSetResult(
    vfId: BigNumberish,
    challengeOutcomeIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPayouts(
    vfId: BigNumberish,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRefunds(
    vfId: BigNumberish,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitToVirtualFloor(
    vfId: BigNumberish,
    outcomeIndex: BigNumberish,
    amount: BigNumberish,
    optionalDeadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmUnchallengedResult(
    vfId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  createVirtualFloor(
    params: VirtualFloorCreationParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creationQuotas(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  finalizeChallenge(
    vfId: BigNumberish,
    finalOutcomeIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeUnsetResult(
    vfId: BigNumberish,
    finalOutcomeIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getVirtualFloorCreator(
    vfId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVirtualFloorOutcomeTotals(
    vfId: BigNumberish,
    outcomeIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OutcomeTotalsStructOutput>;

  getVirtualFloorParams(
    vfId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CreatedVirtualFloorParamsStructOutput>;

  getVirtualFloorState(
    vfId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    params: BaseDoubleDice.BaseDoubleDiceInitParamsStruct,
    bondUsdErc20Token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPaymentTokenWhitelisted(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  platformFeeBeneficiary(overrides?: CallOverrides): Promise<string>;

  platformFeeRate_e18(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolutions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string] & {
      state: number;
      setOutcomeIndex: number;
      tResultChallengeMax: number;
      challengeOutcomeIndex: number;
      challenger: string;
    }
  >;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    contractURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformFeeBeneficiary(
    platformFeeBeneficiary_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformFeeRate_e18(
    platformFeeRate_e18_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setResult(
    vfId: BigNumberish,
    setOutcomeIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenMetadataUriTemplate(
    template: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePaymentTokenWhitelist(
    token: string,
    isWhitelisted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CHALLENGE_BOND_USD_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    CHALLENGE_WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    SET_WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    adjustCreationQuotas(
      adjustments: CreationQuotas.QuotaAdjustmentStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    bondUsdErc20Token(overrides?: CallOverrides): Promise<string>;

    cancelVirtualFloorFlagged(
      vfId: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelVirtualFloorUnresolvable(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    challengeSetResult(
      vfId: BigNumberish,
      challengeOutcomeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPayouts(
      vfId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimRefunds(
      vfId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    commitToVirtualFloor(
      vfId: BigNumberish,
      outcomeIndex: BigNumberish,
      amount: BigNumberish,
      optionalDeadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmUnchallengedResult(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    createVirtualFloor(
      params: VirtualFloorCreationParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    creationQuotas(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalizeChallenge(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeUnsetResult(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getVirtualFloorCreator(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVirtualFloorOutcomeTotals(
      vfId: BigNumberish,
      outcomeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OutcomeTotalsStructOutput>;

    getVirtualFloorParams(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CreatedVirtualFloorParamsStructOutput>;

    getVirtualFloorState(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      params: BaseDoubleDice.BaseDoubleDiceInitParamsStruct,
      bondUsdErc20Token_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPaymentTokenWhitelisted(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    platformFeeBeneficiary(overrides?: CallOverrides): Promise<string>;

    platformFeeRate_e18(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    resolutions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string] & {
        state: number;
        setOutcomeIndex: number;
        tResultChallengeMax: number;
        challengeOutcomeIndex: number;
        challenger: string;
      }
    >;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      contractURI_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformFeeBeneficiary(
      platformFeeBeneficiary_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformFeeRate_e18(
      platformFeeRate_e18_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setResult(
      vfId: BigNumberish,
      setOutcomeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenMetadataUriTemplate(
      template: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updatePaymentTokenWhitelist(
      token: string,
      isWhitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ContractURIUpdate(string)"(
      contractURI?: null
    ): ContractURIUpdateEventFilter;
    ContractURIUpdate(contractURI?: null): ContractURIUpdateEventFilter;

    "CreationQuotaAdjustments(tuple[])"(
      adjustments?: null
    ): CreationQuotaAdjustmentsEventFilter;
    CreationQuotaAdjustments(
      adjustments?: null
    ): CreationQuotaAdjustmentsEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PaymentTokenWhitelistUpdate(address,bool)"(
      token?: string | null,
      whitelisted?: null
    ): PaymentTokenWhitelistUpdateEventFilter;
    PaymentTokenWhitelistUpdate(
      token?: string | null,
      whitelisted?: null
    ): PaymentTokenWhitelistUpdateEventFilter;

    "PlatformFeeBeneficiaryUpdate(address)"(
      platformFeeBeneficiary?: null
    ): PlatformFeeBeneficiaryUpdateEventFilter;
    PlatformFeeBeneficiaryUpdate(
      platformFeeBeneficiary?: null
    ): PlatformFeeBeneficiaryUpdateEventFilter;

    "PlatformFeeRateUpdate(uint256)"(
      platformFeeRate_e18?: null
    ): PlatformFeeRateUpdateEventFilter;
    PlatformFeeRateUpdate(
      platformFeeRate_e18?: null
    ): PlatformFeeRateUpdateEventFilter;

    "ResultUpdate(uint256,address,uint8,uint8)"(
      vfId?: BigNumberish | null,
      operator?: null,
      action?: null,
      outcomeIndex?: null
    ): ResultUpdateEventFilter;
    ResultUpdate(
      vfId?: BigNumberish | null,
      operator?: null,
      action?: null,
      outcomeIndex?: null
    ): ResultUpdateEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UserCommitment(uint256,address,uint8,uint256,uint256,uint256,uint256)"(
      virtualFloorId?: BigNumberish | null,
      committer?: string | null,
      outcomeIndex?: null,
      timeslot?: null,
      amount?: null,
      beta_e18?: null,
      tokenId?: null
    ): UserCommitmentEventFilter;
    UserCommitment(
      virtualFloorId?: BigNumberish | null,
      committer?: string | null,
      outcomeIndex?: null,
      timeslot?: null,
      amount?: null,
      beta_e18?: null,
      tokenId?: null
    ): UserCommitmentEventFilter;

    "VirtualFloorCancellationFlagged(uint256,string)"(
      virtualFloorId?: BigNumberish | null,
      reason?: null
    ): VirtualFloorCancellationFlaggedEventFilter;
    VirtualFloorCancellationFlagged(
      virtualFloorId?: BigNumberish | null,
      reason?: null
    ): VirtualFloorCancellationFlaggedEventFilter;

    "VirtualFloorCancellationUnresolvable(uint256)"(
      virtualFloorId?: BigNumberish | null
    ): VirtualFloorCancellationUnresolvableEventFilter;
    VirtualFloorCancellationUnresolvable(
      virtualFloorId?: BigNumberish | null
    ): VirtualFloorCancellationUnresolvableEventFilter;

    "VirtualFloorCreation(uint256,address,uint256,uint256,uint256,uint32,uint32,uint32,uint8,address,uint256,uint256,uint256,tuple)"(
      virtualFloorId?: BigNumberish | null,
      creator?: string | null,
      betaOpen_e18?: null,
      creationFeeRate_e18?: null,
      platformFeeRate_e18?: null,
      tOpen?: null,
      tClose?: null,
      tResolve?: null,
      nOutcomes?: null,
      paymentToken?: null,
      bonusAmount?: null,
      minCommitmentAmount?: null,
      maxCommitmentAmount?: null,
      metadata?: null
    ): VirtualFloorCreationEventFilter;
    VirtualFloorCreation(
      virtualFloorId?: BigNumberish | null,
      creator?: string | null,
      betaOpen_e18?: null,
      creationFeeRate_e18?: null,
      platformFeeRate_e18?: null,
      tOpen?: null,
      tClose?: null,
      tResolve?: null,
      nOutcomes?: null,
      paymentToken?: null,
      bonusAmount?: null,
      minCommitmentAmount?: null,
      maxCommitmentAmount?: null,
      metadata?: null
    ): VirtualFloorCreationEventFilter;

    "VirtualFloorResolution(uint256,uint8,uint8,uint256,uint256,uint256)"(
      virtualFloorId?: BigNumberish | null,
      winningOutcomeIndex?: null,
      resolutionType?: null,
      winnerProfits?: null,
      platformFeeAmount?: null,
      creatorFeeAmount?: null
    ): VirtualFloorResolutionEventFilter;
    VirtualFloorResolution(
      virtualFloorId?: BigNumberish | null,
      winningOutcomeIndex?: null,
      resolutionType?: null,
      winnerProfits?: null,
      platformFeeAmount?: null,
      creatorFeeAmount?: null
    ): VirtualFloorResolutionEventFilter;
  };

  estimateGas: {
    CHALLENGE_BOND_USD_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    CHALLENGE_WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SET_WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    adjustCreationQuotas(
      adjustments: CreationQuotas.QuotaAdjustmentStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondUsdErc20Token(overrides?: CallOverrides): Promise<BigNumber>;

    cancelVirtualFloorFlagged(
      vfId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelVirtualFloorUnresolvable(
      vfId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    challengeSetResult(
      vfId: BigNumberish,
      challengeOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPayouts(
      vfId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRefunds(
      vfId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitToVirtualFloor(
      vfId: BigNumberish,
      outcomeIndex: BigNumberish,
      amount: BigNumberish,
      optionalDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmUnchallengedResult(
      vfId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    createVirtualFloor(
      params: VirtualFloorCreationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creationQuotas(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalizeChallenge(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeUnsetResult(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVirtualFloorCreator(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVirtualFloorOutcomeTotals(
      vfId: BigNumberish,
      outcomeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVirtualFloorParams(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVirtualFloorState(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      params: BaseDoubleDice.BaseDoubleDiceInitParamsStruct,
      bondUsdErc20Token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPaymentTokenWhitelisted(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    platformFeeBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    platformFeeRate_e18(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolutions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractURI(
      contractURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformFeeBeneficiary(
      platformFeeBeneficiary_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformFeeRate_e18(
      platformFeeRate_e18_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setResult(
      vfId: BigNumberish,
      setOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenMetadataUriTemplate(
      template: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePaymentTokenWhitelist(
      token: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CHALLENGE_BOND_USD_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHALLENGE_WINDOW_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SET_WINDOW_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adjustCreationQuotas(
      adjustments: CreationQuotas.QuotaAdjustmentStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondUsdErc20Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelVirtualFloorFlagged(
      vfId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelVirtualFloorUnresolvable(
      vfId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    challengeSetResult(
      vfId: BigNumberish,
      challengeOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPayouts(
      vfId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRefunds(
      vfId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitToVirtualFloor(
      vfId: BigNumberish,
      outcomeIndex: BigNumberish,
      amount: BigNumberish,
      optionalDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmUnchallengedResult(
      vfId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createVirtualFloor(
      params: VirtualFloorCreationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creationQuotas(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeChallenge(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeUnsetResult(
      vfId: BigNumberish,
      finalOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVirtualFloorCreator(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVirtualFloorOutcomeTotals(
      vfId: BigNumberish,
      outcomeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVirtualFloorParams(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVirtualFloorState(
      vfId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      params: BaseDoubleDice.BaseDoubleDiceInitParamsStruct,
      bondUsdErc20Token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPaymentTokenWhitelisted(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformFeeBeneficiary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    platformFeeRate_e18(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolutions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      contractURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFeeBeneficiary(
      platformFeeBeneficiary_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFeeRate_e18(
      platformFeeRate_e18_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setResult(
      vfId: BigNumberish,
      setOutcomeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenMetadataUriTemplate(
      template: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePaymentTokenWhitelist(
      token: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
