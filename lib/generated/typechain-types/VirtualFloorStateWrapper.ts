/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VirtualFloorStateWrapperInterface extends utils.Interface {
  contractName: "VirtualFloorStateWrapper";
  functions: {
    "Active_Closed_ResolvableLater()": FunctionFragment;
    "Active_Closed_ResolvableNever()": FunctionFragment;
    "Active_Closed_ResolvableNow()": FunctionFragment;
    "Active_Open_MaybeResolvableNever()": FunctionFragment;
    "Active_Open_ResolvableLater()": FunctionFragment;
    "Claimable_Payouts()": FunctionFragment;
    "Claimable_Refunds_Flagged()": FunctionFragment;
    "Claimable_Refunds_ResolvableNever()": FunctionFragment;
    "Claimable_Refunds_ResolvedNoWinners()": FunctionFragment;
    "None()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "Active_Closed_ResolvableLater",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Active_Closed_ResolvableNever",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Active_Closed_ResolvableNow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Active_Open_MaybeResolvableNever",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Active_Open_ResolvableLater",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Claimable_Payouts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Claimable_Refunds_Flagged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Claimable_Refunds_ResolvableNever",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Claimable_Refunds_ResolvedNoWinners",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "None", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "Active_Closed_ResolvableLater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Active_Closed_ResolvableNever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Active_Closed_ResolvableNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Active_Open_MaybeResolvableNever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Active_Open_ResolvableLater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Claimable_Payouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Claimable_Refunds_Flagged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Claimable_Refunds_ResolvableNever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Claimable_Refunds_ResolvedNoWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "None", data: BytesLike): Result;

  events: {};
}

export interface VirtualFloorStateWrapper extends BaseContract {
  contractName: "VirtualFloorStateWrapper";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VirtualFloorStateWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Active_Closed_ResolvableLater(overrides?: CallOverrides): Promise<[number]>;

    Active_Closed_ResolvableNever(overrides?: CallOverrides): Promise<[number]>;

    Active_Closed_ResolvableNow(overrides?: CallOverrides): Promise<[number]>;

    Active_Open_MaybeResolvableNever(
      overrides?: CallOverrides
    ): Promise<[number]>;

    Active_Open_ResolvableLater(overrides?: CallOverrides): Promise<[number]>;

    Claimable_Payouts(overrides?: CallOverrides): Promise<[number]>;

    Claimable_Refunds_Flagged(overrides?: CallOverrides): Promise<[number]>;

    Claimable_Refunds_ResolvableNever(
      overrides?: CallOverrides
    ): Promise<[number]>;

    Claimable_Refunds_ResolvedNoWinners(
      overrides?: CallOverrides
    ): Promise<[number]>;

    None(overrides?: CallOverrides): Promise<[number]>;
  };

  Active_Closed_ResolvableLater(overrides?: CallOverrides): Promise<number>;

  Active_Closed_ResolvableNever(overrides?: CallOverrides): Promise<number>;

  Active_Closed_ResolvableNow(overrides?: CallOverrides): Promise<number>;

  Active_Open_MaybeResolvableNever(overrides?: CallOverrides): Promise<number>;

  Active_Open_ResolvableLater(overrides?: CallOverrides): Promise<number>;

  Claimable_Payouts(overrides?: CallOverrides): Promise<number>;

  Claimable_Refunds_Flagged(overrides?: CallOverrides): Promise<number>;

  Claimable_Refunds_ResolvableNever(overrides?: CallOverrides): Promise<number>;

  Claimable_Refunds_ResolvedNoWinners(
    overrides?: CallOverrides
  ): Promise<number>;

  None(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    Active_Closed_ResolvableLater(overrides?: CallOverrides): Promise<number>;

    Active_Closed_ResolvableNever(overrides?: CallOverrides): Promise<number>;

    Active_Closed_ResolvableNow(overrides?: CallOverrides): Promise<number>;

    Active_Open_MaybeResolvableNever(
      overrides?: CallOverrides
    ): Promise<number>;

    Active_Open_ResolvableLater(overrides?: CallOverrides): Promise<number>;

    Claimable_Payouts(overrides?: CallOverrides): Promise<number>;

    Claimable_Refunds_Flagged(overrides?: CallOverrides): Promise<number>;

    Claimable_Refunds_ResolvableNever(
      overrides?: CallOverrides
    ): Promise<number>;

    Claimable_Refunds_ResolvedNoWinners(
      overrides?: CallOverrides
    ): Promise<number>;

    None(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    Active_Closed_ResolvableLater(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Active_Closed_ResolvableNever(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Active_Closed_ResolvableNow(overrides?: CallOverrides): Promise<BigNumber>;

    Active_Open_MaybeResolvableNever(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Active_Open_ResolvableLater(overrides?: CallOverrides): Promise<BigNumber>;

    Claimable_Payouts(overrides?: CallOverrides): Promise<BigNumber>;

    Claimable_Refunds_Flagged(overrides?: CallOverrides): Promise<BigNumber>;

    Claimable_Refunds_ResolvableNever(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Claimable_Refunds_ResolvedNoWinners(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    None(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Active_Closed_ResolvableLater(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Active_Closed_ResolvableNever(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Active_Closed_ResolvableNow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Active_Open_MaybeResolvableNever(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Active_Open_ResolvableLater(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Claimable_Payouts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Claimable_Refunds_Flagged(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Claimable_Refunds_ResolvableNever(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Claimable_Refunds_ResolvedNoWinners(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    None(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
